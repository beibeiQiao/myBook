<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.2.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"> 
	
	<!-- 配置Spring包扫描范围 -->
	<context:component-scan base-package="com.*"/>
	<!-- 进行c3b0连接池配置 -->
	<!-- 导入jdbc.properties配置文件的方法 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties"></property>
	</bean>
	
	<!-- destroy-method="close":资源使用结束后释放资源 --><!--  destroy-method="close" -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<!-- 
		<property name="driverClass" value="org.gjt.mm.mysql.Driver"/>
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/book?useUnicode=true&amp;characterEncoding=UTF-8"/>
		<property name="user" value="pp"/>
		<property name="password" value=""/>
		 -->
		<!-- jdbc.properties -->
		<property name="driverClass" value="${jdbc.driverClass}"/>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
		<property name="user" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
		
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="1"/>
		<!--连接池中保留的最小连接数。-->
		<property name="minPoolSize" value="1"/>	
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="300"/>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="60"/>	
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="5"/>	
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60"/>
	</bean>
	<!-- 进行c3b0连接池配置 -->
	
	<!-- 创建会话工程 --><!-- destroy-method="destroy" -->
	<!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">-->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/><!-- 创建会话工厂需要利用c3b0连接池配置 -->
		<!-- <property name="mappingResources">
			<list>
				<value>com/entity/Admin.hbm.xml</value>
				<value>com/entity/Book.hbm.xml</value>
			    <value>com/entity/Order.hbm.xml</value>
			    <value>com/entity/Type.hbm.xml</value>
			    <value>com/entity/User.hbm.xml</value>
			    <value>com/entity/Mysuper.hbm.xml</value>
			</list>
		</property>  -->
		<property name="hibernateProperties">
			<props>	  
				<!-- 方言dialect=MySQL5Dialect -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<!-- 当表格不存在的时候是否自动创建表格(数据库存在的情况下) -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- 是否在console显示sql语句 -->
				<prop key="hibernate.show_sql"><!--  true-->false</prop>
				<!-- 开启之后能够在console和log中输出更漂亮的语句 -->
				<prop key="hibernate.format_sql">false</prop>
			</props>
		</property>
		<property name="packagesToScan"  value="com.entity"></property>
	</bean>
	<!-- 创建会话工程 -->
	
	<!-- 事务管理配置-->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!--使用基于注解方式配置事务 --> 
	<tx:annotation-driven transaction-manager="txManager"/> 
	
 </beans>

<!--
	1.在bean中设置 depends-on="b",设置关系依赖，在实例化a对象之前会检查b的实例化对象是否存在，如果不存在，则先
		    实例化b的对象，以防出现有关依赖注入的bean配置顺序出错导致运行出错，例如：
		<bean id="a" class="*" depends-on="b" >
		<bean id="b" class="*" >

	2.初始化方法属性 init-method="methodName",在实例化对象之后强制初始化对象，例如：
		<bean id="c" class="*" init-method="methodNamesf"
	3.autowire:自动装配属性(我们不需用到)
	4.dependency-check="all",设置依赖检查，以便及时发现配置错误
-->

